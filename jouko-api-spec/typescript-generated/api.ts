// tslint:disable
/**
 * Jouko API
 * Jouko API spec
 *
 * OpenAPI spec version: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<any>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ControllerDevice
 */
export interface ControllerDevice {
    /**
     * Controller device id
     * @type {number}
     * @memberof ControllerDevice
     */
    id?: number;
    /**
     * The EUI of the controller device
     * @type {string}
     * @memberof ControllerDevice
     */
    eui: string;
    /**
     * The key of the controller device
     * @type {string}
     * @memberof ControllerDevice
     */
    key: string;
    /**
     * The communication channel of the controller device
     * @type {string}
     * @memberof ControllerDevice
     */
    communicationChannel?: string;
}

/**
 * 
 * @export
 * @interface Device
 */
export interface Device {
    /**
     * Device id
     * @type {number}
     * @memberof Device
     */
    id?: number;
    /**
     * The name of the device
     * @type {string}
     * @memberof Device
     */
    name: string;
    /**
     * Device user id
     * @type {number}
     * @memberof Device
     */
    userId?: number;
    /**
     * Device controller id
     * @type {number}
     * @memberof Device
     */
    controllerId?: number;
}

/**
 * 
 * @export
 * @interface DevicePowerConsumption
 */
export interface DevicePowerConsumption {
    /**
     * The power consumption in the given time span, in watts
     * @type {number}
     * @memberof DevicePowerConsumption
     */
    averageConsumptionInWatts: number;
}

/**
 * 
 * @export
 * @interface InternalServerError
 */
export interface InternalServerError {
    /**
     * The error message
     * @type {string}
     * @memberof InternalServerError
     */
    message: string;
}

/**
 * 
 * @export
 * @interface Interruption
 */
export interface Interruption {
    /**
     * Interruption id
     * @type {number}
     * @memberof Interruption
     */
    id: number;
    /**
     * Start time of the interruption, inclusive
     * @type {string}
     * @memberof Interruption
     */
    startTime: string;
    /**
     * End time of the interruption, exclusive
     * @type {string}
     * @memberof Interruption
     */
    endTime: string;
    /**
     * The ID of the interrupted device
     * @type {number}
     * @memberof Interruption
     */
    deviceId: number;
    /**
     * True if the interruption has been cancelled
     * @type {boolean}
     * @memberof Interruption
     */
    cancelled: boolean;
    /**
     * The time when the interruption was cancelled
     * @type {string}
     * @memberof Interruption
     */
    cancellationTime?: string;
}

/**
 * 
 * @export
 * @interface InterruptionCancellation
 */
export interface InterruptionCancellation {
    /**
     * True if the interruption has been cancelled
     * @type {boolean}
     * @memberof InterruptionCancellation
     */
    cancelled: boolean;
}

/**
 * 
 * @export
 * @interface InterruptionGroup
 */
export interface InterruptionGroup {
    /**
     * Interruption id
     * @type {number}
     * @memberof InterruptionGroup
     */
    id: number;
    /**
     * Start time of the interruption, inclusive
     * @type {string}
     * @memberof InterruptionGroup
     */
    startTime: string;
    /**
     * End time of the interruption, exclusive
     * @type {string}
     * @memberof InterruptionGroup
     */
    endTime: string;
    /**
     * Overbooking factor
     * @type {number}
     * @memberof InterruptionGroup
     */
    overbookingFactor?: number;
    /**
     * The amount of power this interruption is supposed to save, in watts
     * @type {number}
     * @memberof InterruptionGroup
     */
    powerSavingGoalInWatts?: number;
}

/**
 * 
 * @export
 * @interface PowerMeasurement
 */
export interface PowerMeasurement {
    /**
     * Measurement id
     * @type {number}
     * @memberof PowerMeasurement
     */
    id: number;
    /**
     * Start time of the measurement
     * @type {string}
     * @memberof PowerMeasurement
     */
    startTime: string;
    /**
     * End time of the measurement
     * @type {string}
     * @memberof PowerMeasurement
     */
    endTime: string;
    /**
     * Type of measurement
     * @type {string}
     * @memberof PowerMeasurement
     */
    measurementType?: PowerMeasurement.MeasurementTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof PowerMeasurement
     */
    measurementValue: number;
    /**
     * Device id
     * @type {number}
     * @memberof PowerMeasurement
     */
    deviceId?: number;
    /**
     * Phasenumber
     * @type {number}
     * @memberof PowerMeasurement
     */
    phaseNumber: number;
    /**
     * 
     * @type {PowerMeasurementDevice}
     * @memberof PowerMeasurement
     */
    device?: PowerMeasurementDevice;
    /**
     * 
     * @type {boolean}
     * @memberof PowerMeasurement
     */
    relayIsOpen?: boolean;
}

/**
 * @export
 * @namespace PowerMeasurement
 */
export namespace PowerMeasurement {
    /**
     * @export
     * @enum {string}
     */
    export enum MeasurementTypeEnum {
        AVERAGE = <any> 'AVERAGE'
    }
}

/**
 * 
 * @export
 * @interface PowerMeasurementDevice
 */
export interface PowerMeasurementDevice {
    /**
     * devicename
     * @type {string}
     * @memberof PowerMeasurementDevice
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface TODO
 */
export interface TODO {
    /**
     * 
     * @type {number}
     * @memberof TODO
     */
    controllerId?: number;
}

/**
 * 
 * @export
 * @interface Unauthorized
 */
export interface Unauthorized {
    /**
     * The error message
     * @type {string}
     * @memberof Unauthorized
     */
    message: string;
}

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * User id
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * The keycloak id of the user
     * @type {string}
     * @memberof User
     */
    keycloakId?: string;
    /**
     * The firstname id of the user
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * The lastname id of the user
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * The email id of the user
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * The username id of the user
     * @type {string}
     * @memberof User
     */
    username?: string;
}


/**
 * ControllerDevicesApi - fetch parameter creator
 * @export
 */
export const ControllerDevicesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create controller device
         * @param {ControllerDevice} body The controller device to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createControllerDevice(body: ControllerDevice, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createControllerDevice.');
            }
            const path = `/admin/controllerDevices`;
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'POST' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            headerParameter['Content-Type'] = 'application/json';

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);
            requestOptions.body = JSON.stringify(body || {});

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * Deletes an controller
         * @summary Delete controller
         * @param {TODO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteControllerDevice(body: TODO, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling deleteControllerDevice.');
            }
            const path = `/admin/controllerDevices/delete`;
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'POST' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            headerParameter['Content-Type'] = 'application/json';

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);
            requestOptions.body = JSON.stringify(body || {});

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary List all controller devices
         * @param {number} firstResult The offset of the first result
         * @param {number} maxResults The maximum number of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllControllerDevices(firstResult: number, maxResults: number, options: any = {}): FetchArgs {
            // verify required parameter 'firstResult' is not null or undefined
            if (firstResult === null || firstResult === undefined) {
                throw new RequiredError('firstResult','Required parameter firstResult was null or undefined when calling listAllControllerDevices.');
            }
            // verify required parameter 'maxResults' is not null or undefined
            if (maxResults === null || maxResults === undefined) {
                throw new RequiredError('maxResults','Required parameter maxResults was null or undefined when calling listAllControllerDevices.');
            }
            const path = `/admin/controllerDevices`;
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'GET' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            if (firstResult !== undefined) {
                queryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                queryParameter['maxResults'] = maxResults;
            }

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary Retreive controller device
         * @param {number} controllerDeviceId The id of the controller device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveControllerDevice(controllerDeviceId: number, options: any = {}): FetchArgs {
            // verify required parameter 'controllerDeviceId' is not null or undefined
            if (controllerDeviceId === null || controllerDeviceId === undefined) {
                throw new RequiredError('controllerDeviceId','Required parameter controllerDeviceId was null or undefined when calling retrieveControllerDevice.');
            }
            const path = `/admin/controllerDevices/{controllerDeviceId}`
                .replace(`{${"controllerDeviceId"}}`, String(controllerDeviceId));
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'GET' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary Update controller device
         * @param {number} controllerDeviceId The id of the controller device
         * @param {ControllerDevice} newControllerDevice The new data for the controller device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateControllerDevice(controllerDeviceId: number, newControllerDevice: ControllerDevice, options: any = {}): FetchArgs {
            // verify required parameter 'controllerDeviceId' is not null or undefined
            if (controllerDeviceId === null || controllerDeviceId === undefined) {
                throw new RequiredError('controllerDeviceId','Required parameter controllerDeviceId was null or undefined when calling updateControllerDevice.');
            }
            // verify required parameter 'newControllerDevice' is not null or undefined
            if (newControllerDevice === null || newControllerDevice === undefined) {
                throw new RequiredError('newControllerDevice','Required parameter newControllerDevice was null or undefined when calling updateControllerDevice.');
            }
            const path = `/admin/controllerDevices/{controllerDeviceId}`
                .replace(`{${"controllerDeviceId"}}`, String(controllerDeviceId));
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'PUT' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            headerParameter['Content-Type'] = 'application/json';

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);
            requestOptions.body = JSON.stringify(newControllerDevice || {});

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
    }
};

/**
 * ControllerDevicesApi - functional programming interface
 * @export
 */
export const ControllerDevicesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create controller device
         * @param {ControllerDevice} body The controller device to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createControllerDevice(body: ControllerDevice, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ControllerDevice> {
            const fetchArgs = ControllerDevicesApiFetchParamCreator(configuration).createControllerDevice(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes an controller
         * @summary Delete controller
         * @param {TODO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteControllerDevice(body: TODO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const fetchArgs = ControllerDevicesApiFetchParamCreator(configuration).deleteControllerDevice(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List all controller devices
         * @param {number} firstResult The offset of the first result
         * @param {number} maxResults The maximum number of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllControllerDevices(firstResult: number, maxResults: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ControllerDevice>> {
            const fetchArgs = ControllerDevicesApiFetchParamCreator(configuration).listAllControllerDevices(firstResult, maxResults, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retreive controller device
         * @param {number} controllerDeviceId The id of the controller device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveControllerDevice(controllerDeviceId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ControllerDevice> {
            const fetchArgs = ControllerDevicesApiFetchParamCreator(configuration).retrieveControllerDevice(controllerDeviceId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update controller device
         * @param {number} controllerDeviceId The id of the controller device
         * @param {ControllerDevice} newControllerDevice The new data for the controller device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateControllerDevice(controllerDeviceId: number, newControllerDevice: ControllerDevice, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ControllerDevice> {
            const fetchArgs = ControllerDevicesApiFetchParamCreator(configuration).updateControllerDevice(controllerDeviceId, newControllerDevice, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ControllerDevicesApi - factory interface
 * @export
 */
export const ControllerDevicesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create controller device
         * @param {ControllerDevice} body The controller device to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createControllerDevice(body: ControllerDevice, options?: any) {
            return ControllerDevicesApiFp(configuration).createControllerDevice(body, options)(fetch, basePath);
        },
        /**
         * Deletes an controller
         * @summary Delete controller
         * @param {TODO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteControllerDevice(body: TODO, options?: any) {
            return ControllerDevicesApiFp(configuration).deleteControllerDevice(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List all controller devices
         * @param {number} firstResult The offset of the first result
         * @param {number} maxResults The maximum number of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllControllerDevices(firstResult: number, maxResults: number, options?: any) {
            return ControllerDevicesApiFp(configuration).listAllControllerDevices(firstResult, maxResults, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retreive controller device
         * @param {number} controllerDeviceId The id of the controller device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveControllerDevice(controllerDeviceId: number, options?: any) {
            return ControllerDevicesApiFp(configuration).retrieveControllerDevice(controllerDeviceId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update controller device
         * @param {number} controllerDeviceId The id of the controller device
         * @param {ControllerDevice} newControllerDevice The new data for the controller device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateControllerDevice(controllerDeviceId: number, newControllerDevice: ControllerDevice, options?: any) {
            return ControllerDevicesApiFp(configuration).updateControllerDevice(controllerDeviceId, newControllerDevice, options)(fetch, basePath);
        },
    };
};

/**
 * ControllerDevicesApi - object-oriented interface
 * @export
 * @class ControllerDevicesApi
 * @extends {BaseAPI}
 */
export class ControllerDevicesApi extends BaseAPI {
    /**
     * 
     * @summary Create controller device
     * @param {} body The controller device to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerDevicesApi
     */
    public createControllerDevice(body: ControllerDevice, options?: any) {
        return ControllerDevicesApiFp(this.configuration).createControllerDevice(body, options)(this.fetch, this.basePath);
    }

    /**
     * Deletes an controller
     * @summary Delete controller
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerDevicesApi
     */
    public deleteControllerDevice(body: TODO, options?: any) {
        return ControllerDevicesApiFp(this.configuration).deleteControllerDevice(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List all controller devices
     * @param {} firstResult The offset of the first result
     * @param {} maxResults The maximum number of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerDevicesApi
     */
    public listAllControllerDevices(firstResult: number, maxResults: number, options?: any) {
        return ControllerDevicesApiFp(this.configuration).listAllControllerDevices(firstResult, maxResults, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retreive controller device
     * @param {} controllerDeviceId The id of the controller device
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerDevicesApi
     */
    public retrieveControllerDevice(controllerDeviceId: number, options?: any) {
        return ControllerDevicesApiFp(this.configuration).retrieveControllerDevice(controllerDeviceId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update controller device
     * @param {} controllerDeviceId The id of the controller device
     * @param {} newControllerDevice The new data for the controller device
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerDevicesApi
     */
    public updateControllerDevice(controllerDeviceId: number, newControllerDevice: ControllerDevice, options?: any) {
        return ControllerDevicesApiFp(this.configuration).updateControllerDevice(controllerDeviceId, newControllerDevice, options)(this.fetch, this.basePath);
    }

}

/**
 * DevicesApi - fetch parameter creator
 * @export
 */
export const DevicesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create device
         * @param {Device} body The device to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevice(body: Device, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createDevice.');
            }
            const path = `/admin/devices`;
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'POST' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            headerParameter['Content-Type'] = 'application/json';

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);
            requestOptions.body = JSON.stringify(body || {});

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary Get the power consumption of the given device in a time period
         * @param {number} userId The user that owns the device
         * @param {number} deviceId The device whose power consumption we measure
         * @param {string} fromTime The start of the time period that we measure the consumption in, inclusive
         * @param {string} toTime The end of the time period that we measure the consumption in, exclusive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPowerConsumption(userId: number, deviceId: number, fromTime: string, toTime: string, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getPowerConsumption.');
            }
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId','Required parameter deviceId was null or undefined when calling getPowerConsumption.');
            }
            // verify required parameter 'fromTime' is not null or undefined
            if (fromTime === null || fromTime === undefined) {
                throw new RequiredError('fromTime','Required parameter fromTime was null or undefined when calling getPowerConsumption.');
            }
            // verify required parameter 'toTime' is not null or undefined
            if (toTime === null || toTime === undefined) {
                throw new RequiredError('toTime','Required parameter toTime was null or undefined when calling getPowerConsumption.');
            }
            const path = `/users/{userId}/devices/{deviceId}/powerConsumption`
                .replace(`{${"userId"}}`, String(userId))
                .replace(`{${"deviceId"}}`, String(deviceId));
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'GET' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            if (fromTime !== undefined) {
                queryParameter['fromTime'] = fromTime;
            }

            if (toTime !== undefined) {
                queryParameter['toTime'] = toTime;
            }

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary List all devices
         * @param {number} firstResult The offset of the first result
         * @param {number} maxResults The maximum number of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllDevices(firstResult: number, maxResults: number, options: any = {}): FetchArgs {
            // verify required parameter 'firstResult' is not null or undefined
            if (firstResult === null || firstResult === undefined) {
                throw new RequiredError('firstResult','Required parameter firstResult was null or undefined when calling listAllDevices.');
            }
            // verify required parameter 'maxResults' is not null or undefined
            if (maxResults === null || maxResults === undefined) {
                throw new RequiredError('maxResults','Required parameter maxResults was null or undefined when calling listAllDevices.');
            }
            const path = `/admin/devices`;
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'GET' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            if (firstResult !== undefined) {
                queryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                queryParameter['maxResults'] = maxResults;
            }

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary List all measurements
         * @param {number} userId The id of the user
         * @param {string} fromTime List measurements that start after this point of time, inclusive
         * @param {string} toTime List measurements that end before this point of time, exclusive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllMeasurements(userId: number, fromTime: string, toTime: string, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listAllMeasurements.');
            }
            // verify required parameter 'fromTime' is not null or undefined
            if (fromTime === null || fromTime === undefined) {
                throw new RequiredError('fromTime','Required parameter fromTime was null or undefined when calling listAllMeasurements.');
            }
            // verify required parameter 'toTime' is not null or undefined
            if (toTime === null || toTime === undefined) {
                throw new RequiredError('toTime','Required parameter toTime was null or undefined when calling listAllMeasurements.');
            }
            const path = `/users/{userId}/powerMeasurements`
                .replace(`{${"userId"}}`, String(userId));
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'GET' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            if (fromTime !== undefined) {
                queryParameter['fromTime'] = fromTime;
            }

            if (toTime !== undefined) {
                queryParameter['toTime'] = toTime;
            }

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary List devices
         * @param {number} userId The user who owns the interruption
         * @param {number} firstResult The offset of the first result
         * @param {number} maxResults The maximum number of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDevices(userId: number, firstResult: number, maxResults: number, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listDevices.');
            }
            // verify required parameter 'firstResult' is not null or undefined
            if (firstResult === null || firstResult === undefined) {
                throw new RequiredError('firstResult','Required parameter firstResult was null or undefined when calling listDevices.');
            }
            // verify required parameter 'maxResults' is not null or undefined
            if (maxResults === null || maxResults === undefined) {
                throw new RequiredError('maxResults','Required parameter maxResults was null or undefined when calling listDevices.');
            }
            const path = `/users/{userId}/devices`
                .replace(`{${"userId"}}`, String(userId));
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'GET' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            if (firstResult !== undefined) {
                queryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                queryParameter['maxResults'] = maxResults;
            }

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary List all measurements by device
         * @param {number} userId The id of the user
         * @param {number} deviceId The id of the device
         * @param {string} fromTime List measurements that start after this point of time, inclusive
         * @param {string} toTime List measurements that end before this point of time, exclusive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMeasurementsByDevice(userId: number, deviceId: number, fromTime: string, toTime: string, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listMeasurementsByDevice.');
            }
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId','Required parameter deviceId was null or undefined when calling listMeasurementsByDevice.');
            }
            // verify required parameter 'fromTime' is not null or undefined
            if (fromTime === null || fromTime === undefined) {
                throw new RequiredError('fromTime','Required parameter fromTime was null or undefined when calling listMeasurementsByDevice.');
            }
            // verify required parameter 'toTime' is not null or undefined
            if (toTime === null || toTime === undefined) {
                throw new RequiredError('toTime','Required parameter toTime was null or undefined when calling listMeasurementsByDevice.');
            }
            const path = `/users/{userId}/devices/{deviceId}/powerMeasurements`
                .replace(`{${"userId"}}`, String(userId))
                .replace(`{${"deviceId"}}`, String(deviceId));
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'GET' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            if (fromTime !== undefined) {
                queryParameter['fromTime'] = fromTime;
            }

            if (toTime !== undefined) {
                queryParameter['toTime'] = toTime;
            }

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary Retreive device
         * @param {number} deviceId The id of the device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDevice(deviceId: number, options: any = {}): FetchArgs {
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId','Required parameter deviceId was null or undefined when calling retrieveDevice.');
            }
            const path = `/admin/devices/{deviceId}`
                .replace(`{${"deviceId"}}`, String(deviceId));
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'GET' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary Update device
         * @param {number} deviceId The id of the device
         * @param {Device} newDevice The new data for the device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDevice(deviceId: number, newDevice: Device, options: any = {}): FetchArgs {
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId','Required parameter deviceId was null or undefined when calling updateDevice.');
            }
            // verify required parameter 'newDevice' is not null or undefined
            if (newDevice === null || newDevice === undefined) {
                throw new RequiredError('newDevice','Required parameter newDevice was null or undefined when calling updateDevice.');
            }
            const path = `/admin/devices/{deviceId}`
                .replace(`{${"deviceId"}}`, String(deviceId));
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'PUT' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            headerParameter['Content-Type'] = 'application/json';

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);
            requestOptions.body = JSON.stringify(newDevice || {});

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
    }
};

/**
 * DevicesApi - functional programming interface
 * @export
 */
export const DevicesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create device
         * @param {Device} body The device to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevice(body: Device, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Device> {
            const fetchArgs = DevicesApiFetchParamCreator(configuration).createDevice(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the power consumption of the given device in a time period
         * @param {number} userId The user that owns the device
         * @param {number} deviceId The device whose power consumption we measure
         * @param {string} fromTime The start of the time period that we measure the consumption in, inclusive
         * @param {string} toTime The end of the time period that we measure the consumption in, exclusive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPowerConsumption(userId: number, deviceId: number, fromTime: string, toTime: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DevicePowerConsumption> {
            const fetchArgs = DevicesApiFetchParamCreator(configuration).getPowerConsumption(userId, deviceId, fromTime, toTime, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List all devices
         * @param {number} firstResult The offset of the first result
         * @param {number} maxResults The maximum number of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllDevices(firstResult: number, maxResults: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Device>> {
            const fetchArgs = DevicesApiFetchParamCreator(configuration).listAllDevices(firstResult, maxResults, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List all measurements
         * @param {number} userId The id of the user
         * @param {string} fromTime List measurements that start after this point of time, inclusive
         * @param {string} toTime List measurements that end before this point of time, exclusive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllMeasurements(userId: number, fromTime: string, toTime: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<PowerMeasurement>> {
            const fetchArgs = DevicesApiFetchParamCreator(configuration).listAllMeasurements(userId, fromTime, toTime, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List devices
         * @param {number} userId The user who owns the interruption
         * @param {number} firstResult The offset of the first result
         * @param {number} maxResults The maximum number of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDevices(userId: number, firstResult: number, maxResults: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Device>> {
            const fetchArgs = DevicesApiFetchParamCreator(configuration).listDevices(userId, firstResult, maxResults, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List all measurements by device
         * @param {number} userId The id of the user
         * @param {number} deviceId The id of the device
         * @param {string} fromTime List measurements that start after this point of time, inclusive
         * @param {string} toTime List measurements that end before this point of time, exclusive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMeasurementsByDevice(userId: number, deviceId: number, fromTime: string, toTime: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<PowerMeasurement>> {
            const fetchArgs = DevicesApiFetchParamCreator(configuration).listMeasurementsByDevice(userId, deviceId, fromTime, toTime, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retreive device
         * @param {number} deviceId The id of the device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDevice(deviceId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Device> {
            const fetchArgs = DevicesApiFetchParamCreator(configuration).retrieveDevice(deviceId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update device
         * @param {number} deviceId The id of the device
         * @param {Device} newDevice The new data for the device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDevice(deviceId: number, newDevice: Device, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Device> {
            const fetchArgs = DevicesApiFetchParamCreator(configuration).updateDevice(deviceId, newDevice, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DevicesApi - factory interface
 * @export
 */
export const DevicesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create device
         * @param {Device} body The device to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevice(body: Device, options?: any) {
            return DevicesApiFp(configuration).createDevice(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the power consumption of the given device in a time period
         * @param {number} userId The user that owns the device
         * @param {number} deviceId The device whose power consumption we measure
         * @param {string} fromTime The start of the time period that we measure the consumption in, inclusive
         * @param {string} toTime The end of the time period that we measure the consumption in, exclusive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPowerConsumption(userId: number, deviceId: number, fromTime: string, toTime: string, options?: any) {
            return DevicesApiFp(configuration).getPowerConsumption(userId, deviceId, fromTime, toTime, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List all devices
         * @param {number} firstResult The offset of the first result
         * @param {number} maxResults The maximum number of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllDevices(firstResult: number, maxResults: number, options?: any) {
            return DevicesApiFp(configuration).listAllDevices(firstResult, maxResults, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List all measurements
         * @param {number} userId The id of the user
         * @param {string} fromTime List measurements that start after this point of time, inclusive
         * @param {string} toTime List measurements that end before this point of time, exclusive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllMeasurements(userId: number, fromTime: string, toTime: string, options?: any) {
            return DevicesApiFp(configuration).listAllMeasurements(userId, fromTime, toTime, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List devices
         * @param {number} userId The user who owns the interruption
         * @param {number} firstResult The offset of the first result
         * @param {number} maxResults The maximum number of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDevices(userId: number, firstResult: number, maxResults: number, options?: any) {
            return DevicesApiFp(configuration).listDevices(userId, firstResult, maxResults, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List all measurements by device
         * @param {number} userId The id of the user
         * @param {number} deviceId The id of the device
         * @param {string} fromTime List measurements that start after this point of time, inclusive
         * @param {string} toTime List measurements that end before this point of time, exclusive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMeasurementsByDevice(userId: number, deviceId: number, fromTime: string, toTime: string, options?: any) {
            return DevicesApiFp(configuration).listMeasurementsByDevice(userId, deviceId, fromTime, toTime, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retreive device
         * @param {number} deviceId The id of the device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDevice(deviceId: number, options?: any) {
            return DevicesApiFp(configuration).retrieveDevice(deviceId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update device
         * @param {number} deviceId The id of the device
         * @param {Device} newDevice The new data for the device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDevice(deviceId: number, newDevice: Device, options?: any) {
            return DevicesApiFp(configuration).updateDevice(deviceId, newDevice, options)(fetch, basePath);
        },
    };
};

/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
export class DevicesApi extends BaseAPI {
    /**
     * 
     * @summary Create device
     * @param {} body The device to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public createDevice(body: Device, options?: any) {
        return DevicesApiFp(this.configuration).createDevice(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the power consumption of the given device in a time period
     * @param {} userId The user that owns the device
     * @param {} deviceId The device whose power consumption we measure
     * @param {} fromTime The start of the time period that we measure the consumption in, inclusive
     * @param {} toTime The end of the time period that we measure the consumption in, exclusive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public getPowerConsumption(userId: number, deviceId: number, fromTime: string, toTime: string, options?: any) {
        return DevicesApiFp(this.configuration).getPowerConsumption(userId, deviceId, fromTime, toTime, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List all devices
     * @param {} firstResult The offset of the first result
     * @param {} maxResults The maximum number of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public listAllDevices(firstResult: number, maxResults: number, options?: any) {
        return DevicesApiFp(this.configuration).listAllDevices(firstResult, maxResults, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List all measurements
     * @param {} userId The id of the user
     * @param {} fromTime List measurements that start after this point of time, inclusive
     * @param {} toTime List measurements that end before this point of time, exclusive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public listAllMeasurements(userId: number, fromTime: string, toTime: string, options?: any) {
        return DevicesApiFp(this.configuration).listAllMeasurements(userId, fromTime, toTime, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List devices
     * @param {} userId The user who owns the interruption
     * @param {} firstResult The offset of the first result
     * @param {} maxResults The maximum number of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public listDevices(userId: number, firstResult: number, maxResults: number, options?: any) {
        return DevicesApiFp(this.configuration).listDevices(userId, firstResult, maxResults, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List all measurements by device
     * @param {} userId The id of the user
     * @param {} deviceId The id of the device
     * @param {} fromTime List measurements that start after this point of time, inclusive
     * @param {} toTime List measurements that end before this point of time, exclusive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public listMeasurementsByDevice(userId: number, deviceId: number, fromTime: string, toTime: string, options?: any) {
        return DevicesApiFp(this.configuration).listMeasurementsByDevice(userId, deviceId, fromTime, toTime, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retreive device
     * @param {} deviceId The id of the device
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public retrieveDevice(deviceId: number, options?: any) {
        return DevicesApiFp(this.configuration).retrieveDevice(deviceId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update device
     * @param {} deviceId The id of the device
     * @param {} newDevice The new data for the device
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public updateDevice(deviceId: number, newDevice: Device, options?: any) {
        return DevicesApiFp(this.configuration).updateDevice(deviceId, newDevice, options)(this.fetch, this.basePath);
    }

}

/**
 * InterruptionGroupsApi - fetch parameter creator
 * @export
 */
export const InterruptionGroupsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create interruption group
         * @param {InterruptionGroup} body The cancellation status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInterruptionGroup(body: InterruptionGroup, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createInterruptionGroup.');
            }
            const path = `/admin/interruptiongroups/`;
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'POST' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            headerParameter['Content-Type'] = 'application/json';

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);
            requestOptions.body = JSON.stringify(body || {});

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * Deletes an interruption
         * @summary Delete interruption
         * @param {number} groupId The id of the interruption being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInterruption(groupId: number, options: any = {}): FetchArgs {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling deleteInterruption.');
            }
            const path = `/admin/interruptiongroups/{groupId}`
                .replace(`{${"groupId"}}`, String(groupId));
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'DELETE' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary List interruption groups
         * @param {number} firstResult The offset of the first result
         * @param {number} maxResults The maximum number of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInterruptionGroups(firstResult: number, maxResults: number, options: any = {}): FetchArgs {
            // verify required parameter 'firstResult' is not null or undefined
            if (firstResult === null || firstResult === undefined) {
                throw new RequiredError('firstResult','Required parameter firstResult was null or undefined when calling listInterruptionGroups.');
            }
            // verify required parameter 'maxResults' is not null or undefined
            if (maxResults === null || maxResults === undefined) {
                throw new RequiredError('maxResults','Required parameter maxResults was null or undefined when calling listInterruptionGroups.');
            }
            const path = `/admin/interruptiongroups/`;
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'GET' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            if (firstResult !== undefined) {
                queryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                queryParameter['maxResults'] = maxResults;
            }

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
    }
};

/**
 * InterruptionGroupsApi - functional programming interface
 * @export
 */
export const InterruptionGroupsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create interruption group
         * @param {InterruptionGroup} body The cancellation status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInterruptionGroup(body: InterruptionGroup, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InterruptionGroup> {
            const fetchArgs = InterruptionGroupsApiFetchParamCreator(configuration).createInterruptionGroup(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes an interruption
         * @summary Delete interruption
         * @param {number} groupId The id of the interruption being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInterruption(groupId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const fetchArgs = InterruptionGroupsApiFetchParamCreator(configuration).deleteInterruption(groupId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List interruption groups
         * @param {number} firstResult The offset of the first result
         * @param {number} maxResults The maximum number of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInterruptionGroups(firstResult: number, maxResults: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<InterruptionGroup>> {
            const fetchArgs = InterruptionGroupsApiFetchParamCreator(configuration).listInterruptionGroups(firstResult, maxResults, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * InterruptionGroupsApi - factory interface
 * @export
 */
export const InterruptionGroupsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create interruption group
         * @param {InterruptionGroup} body The cancellation status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInterruptionGroup(body: InterruptionGroup, options?: any) {
            return InterruptionGroupsApiFp(configuration).createInterruptionGroup(body, options)(fetch, basePath);
        },
        /**
         * Deletes an interruption
         * @summary Delete interruption
         * @param {number} groupId The id of the interruption being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInterruption(groupId: number, options?: any) {
            return InterruptionGroupsApiFp(configuration).deleteInterruption(groupId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List interruption groups
         * @param {number} firstResult The offset of the first result
         * @param {number} maxResults The maximum number of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInterruptionGroups(firstResult: number, maxResults: number, options?: any) {
            return InterruptionGroupsApiFp(configuration).listInterruptionGroups(firstResult, maxResults, options)(fetch, basePath);
        },
    };
};

/**
 * InterruptionGroupsApi - object-oriented interface
 * @export
 * @class InterruptionGroupsApi
 * @extends {BaseAPI}
 */
export class InterruptionGroupsApi extends BaseAPI {
    /**
     * 
     * @summary Create interruption group
     * @param {} body The cancellation status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterruptionGroupsApi
     */
    public createInterruptionGroup(body: InterruptionGroup, options?: any) {
        return InterruptionGroupsApiFp(this.configuration).createInterruptionGroup(body, options)(this.fetch, this.basePath);
    }

    /**
     * Deletes an interruption
     * @summary Delete interruption
     * @param {} groupId The id of the interruption being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterruptionGroupsApi
     */
    public deleteInterruption(groupId: number, options?: any) {
        return InterruptionGroupsApiFp(this.configuration).deleteInterruption(groupId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List interruption groups
     * @param {} firstResult The offset of the first result
     * @param {} maxResults The maximum number of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterruptionGroupsApi
     */
    public listInterruptionGroups(firstResult: number, maxResults: number, options?: any) {
        return InterruptionGroupsApiFp(this.configuration).listInterruptionGroups(firstResult, maxResults, options)(this.fetch, this.basePath);
    }

}

/**
 * InterruptionsApi - fetch parameter creator
 * @export
 */
export const InterruptionsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List interruptions
         * @param {number} userId The user whose interruptions we list
         * @param {string} fromTime List interruptions that start after this point of time, inclusive
         * @param {string} toTime List interruptions that end before this point of time, exclusive
         * @param {number} [deviceId] The device id whose interruptions we list, list all if omitted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInterruptions(userId: number, fromTime: string, toTime: string, deviceId?: number, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listInterruptions.');
            }
            // verify required parameter 'fromTime' is not null or undefined
            if (fromTime === null || fromTime === undefined) {
                throw new RequiredError('fromTime','Required parameter fromTime was null or undefined when calling listInterruptions.');
            }
            // verify required parameter 'toTime' is not null or undefined
            if (toTime === null || toTime === undefined) {
                throw new RequiredError('toTime','Required parameter toTime was null or undefined when calling listInterruptions.');
            }
            const path = `/users/{userId}/interruptions`
                .replace(`{${"userId"}}`, String(userId));
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'GET' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            if (fromTime !== undefined) {
                queryParameter['fromTime'] = fromTime;
            }

            if (toTime !== undefined) {
                queryParameter['toTime'] = toTime;
            }

            if (deviceId !== undefined) {
                queryParameter['deviceId'] = deviceId;
            }

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary Retreive interruption group
         * @param {number} groupId The id of the interruption group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInterruptionGroup(groupId: number, options: any = {}): FetchArgs {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling retrieveInterruptionGroup.');
            }
            const path = `/admin/interruptiongroups/{groupId}`
                .replace(`{${"groupId"}}`, String(groupId));
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'GET' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary Set interruption's cancellation status
         * @param {number} userId The user who owns the interruption
         * @param {number} interruptionId The id of the interruption to set cancellation status of
         * @param {InterruptionCancellation} body The cancellation status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setInterruptionCancelled(userId: number, interruptionId: number, body: InterruptionCancellation, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling setInterruptionCancelled.');
            }
            // verify required parameter 'interruptionId' is not null or undefined
            if (interruptionId === null || interruptionId === undefined) {
                throw new RequiredError('interruptionId','Required parameter interruptionId was null or undefined when calling setInterruptionCancelled.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling setInterruptionCancelled.');
            }
            const path = `/users/{userId}/interruptions/{interruptionId}/cancelled`
                .replace(`{${"userId"}}`, String(userId))
                .replace(`{${"interruptionId"}}`, String(interruptionId));
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'PUT' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            headerParameter['Content-Type'] = 'application/json';

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);
            requestOptions.body = JSON.stringify(body || {});

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary Update interruption group
         * @param {number} groupId The id of the interruption group
         * @param {InterruptionGroup} body The cancellation status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInterruptionGroup(groupId: number, body: InterruptionGroup, options: any = {}): FetchArgs {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling updateInterruptionGroup.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateInterruptionGroup.');
            }
            const path = `/admin/interruptiongroups/{groupId}`
                .replace(`{${"groupId"}}`, String(groupId));
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'PUT' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            headerParameter['Content-Type'] = 'application/json';

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);
            requestOptions.body = JSON.stringify(body || {});

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
    }
};

/**
 * InterruptionsApi - functional programming interface
 * @export
 */
export const InterruptionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List interruptions
         * @param {number} userId The user whose interruptions we list
         * @param {string} fromTime List interruptions that start after this point of time, inclusive
         * @param {string} toTime List interruptions that end before this point of time, exclusive
         * @param {number} [deviceId] The device id whose interruptions we list, list all if omitted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInterruptions(userId: number, fromTime: string, toTime: string, deviceId?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Interruption>> {
            const fetchArgs = InterruptionsApiFetchParamCreator(configuration).listInterruptions(userId, fromTime, toTime, deviceId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retreive interruption group
         * @param {number} groupId The id of the interruption group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInterruptionGroup(groupId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InterruptionGroup> {
            const fetchArgs = InterruptionsApiFetchParamCreator(configuration).retrieveInterruptionGroup(groupId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Set interruption's cancellation status
         * @param {number} userId The user who owns the interruption
         * @param {number} interruptionId The id of the interruption to set cancellation status of
         * @param {InterruptionCancellation} body The cancellation status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setInterruptionCancelled(userId: number, interruptionId: number, body: InterruptionCancellation, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InterruptionCancellation> {
            const fetchArgs = InterruptionsApiFetchParamCreator(configuration).setInterruptionCancelled(userId, interruptionId, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update interruption group
         * @param {number} groupId The id of the interruption group
         * @param {InterruptionGroup} body The cancellation status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInterruptionGroup(groupId: number, body: InterruptionGroup, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InterruptionGroup> {
            const fetchArgs = InterruptionsApiFetchParamCreator(configuration).updateInterruptionGroup(groupId, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * InterruptionsApi - factory interface
 * @export
 */
export const InterruptionsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary List interruptions
         * @param {number} userId The user whose interruptions we list
         * @param {string} fromTime List interruptions that start after this point of time, inclusive
         * @param {string} toTime List interruptions that end before this point of time, exclusive
         * @param {number} [deviceId] The device id whose interruptions we list, list all if omitted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInterruptions(userId: number, fromTime: string, toTime: string, deviceId?: number, options?: any) {
            return InterruptionsApiFp(configuration).listInterruptions(userId, fromTime, toTime, deviceId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retreive interruption group
         * @param {number} groupId The id of the interruption group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInterruptionGroup(groupId: number, options?: any) {
            return InterruptionsApiFp(configuration).retrieveInterruptionGroup(groupId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Set interruption's cancellation status
         * @param {number} userId The user who owns the interruption
         * @param {number} interruptionId The id of the interruption to set cancellation status of
         * @param {InterruptionCancellation} body The cancellation status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setInterruptionCancelled(userId: number, interruptionId: number, body: InterruptionCancellation, options?: any) {
            return InterruptionsApiFp(configuration).setInterruptionCancelled(userId, interruptionId, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update interruption group
         * @param {number} groupId The id of the interruption group
         * @param {InterruptionGroup} body The cancellation status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInterruptionGroup(groupId: number, body: InterruptionGroup, options?: any) {
            return InterruptionsApiFp(configuration).updateInterruptionGroup(groupId, body, options)(fetch, basePath);
        },
    };
};

/**
 * InterruptionsApi - object-oriented interface
 * @export
 * @class InterruptionsApi
 * @extends {BaseAPI}
 */
export class InterruptionsApi extends BaseAPI {
    /**
     * 
     * @summary List interruptions
     * @param {} userId The user whose interruptions we list
     * @param {} fromTime List interruptions that start after this point of time, inclusive
     * @param {} toTime List interruptions that end before this point of time, exclusive
     * @param {} [deviceId] The device id whose interruptions we list, list all if omitted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterruptionsApi
     */
    public listInterruptions(userId: number, fromTime: string, toTime: string, deviceId?: number, options?: any) {
        return InterruptionsApiFp(this.configuration).listInterruptions(userId, fromTime, toTime, deviceId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retreive interruption group
     * @param {} groupId The id of the interruption group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterruptionsApi
     */
    public retrieveInterruptionGroup(groupId: number, options?: any) {
        return InterruptionsApiFp(this.configuration).retrieveInterruptionGroup(groupId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Set interruption's cancellation status
     * @param {} userId The user who owns the interruption
     * @param {} interruptionId The id of the interruption to set cancellation status of
     * @param {} body The cancellation status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterruptionsApi
     */
    public setInterruptionCancelled(userId: number, interruptionId: number, body: InterruptionCancellation, options?: any) {
        return InterruptionsApiFp(this.configuration).setInterruptionCancelled(userId, interruptionId, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update interruption group
     * @param {} groupId The id of the interruption group
     * @param {} body The cancellation status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterruptionsApi
     */
    public updateInterruptionGroup(groupId: number, body: InterruptionGroup, options?: any) {
        return InterruptionsApiFp(this.configuration).updateInterruptionGroup(groupId, body, options)(this.fetch, this.basePath);
    }

}

/**
 * UsersApi - fetch parameter creator
 * @export
 */
export const UsersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create user
         * @param {User} body The user to be created
         * @param {string} [token] Keycloak token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: User, token?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createUser.');
            }
            const path = `/admin/users`;
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'POST' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            if (token !== undefined) {
                queryParameter['token'] = token;
            }

            headerParameter['Content-Type'] = 'application/json';

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);
            requestOptions.body = JSON.stringify(body || {});

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary Get an user by keycloak id
         * @param {string} keycloakId The keycloak id of the user to look up
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByKeycloakId(keycloakId: string, options: any = {}): FetchArgs {
            // verify required parameter 'keycloakId' is not null or undefined
            if (keycloakId === null || keycloakId === undefined) {
                throw new RequiredError('keycloakId','Required parameter keycloakId was null or undefined when calling getUserByKeycloakId.');
            }
            const path = `/keycloakUsers/{keycloakId}`
                .replace(`{${"keycloakId"}}`, String(keycloakId));
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'GET' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary List all users
         * @param {number} firstResult The offset of the first result
         * @param {number} maxResults The maximum number of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllUsers(firstResult: number, maxResults: number, options: any = {}): FetchArgs {
            // verify required parameter 'firstResult' is not null or undefined
            if (firstResult === null || firstResult === undefined) {
                throw new RequiredError('firstResult','Required parameter firstResult was null or undefined when calling listAllUsers.');
            }
            // verify required parameter 'maxResults' is not null or undefined
            if (maxResults === null || maxResults === undefined) {
                throw new RequiredError('maxResults','Required parameter maxResults was null or undefined when calling listAllUsers.');
            }
            const path = `/admin/users`;
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'GET' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            if (firstResult !== undefined) {
                queryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                queryParameter['maxResults'] = maxResults;
            }

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary List users
         * @param {string} [token] Keycloak token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKeycloakUsers(token?: string, options: any = {}): FetchArgs {
            const path = `/keycloakUsers`;
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'GET' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            if (token !== undefined) {
                queryParameter['token'] = token;
            }

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary Retreive user
         * @param {number} userId The id of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveUser(userId: number, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling retrieveUser.');
            }
            const path = `/admin/users/{userId}`
                .replace(`{${"userId"}}`, String(userId));
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'GET' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @summary Update user
         * @param {number} userId The id of the user
         * @param {User} body The user to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userId: number, body: User, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling updateUser.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateUser.');
            }
            const path = `/admin/users/{userId}`
                .replace(`{${"userId"}}`, String(userId));
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'PUT' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            headerParameter['Content-Type'] = 'application/json';

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);
            requestOptions.body = JSON.stringify(body || {});

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create user
         * @param {User} body The user to be created
         * @param {string} [token] Keycloak token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: User, token?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const fetchArgs = UsersApiFetchParamCreator(configuration).createUser(body, token, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get an user by keycloak id
         * @param {string} keycloakId The keycloak id of the user to look up
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByKeycloakId(keycloakId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const fetchArgs = UsersApiFetchParamCreator(configuration).getUserByKeycloakId(keycloakId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List all users
         * @param {number} firstResult The offset of the first result
         * @param {number} maxResults The maximum number of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllUsers(firstResult: number, maxResults: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<User>> {
            const fetchArgs = UsersApiFetchParamCreator(configuration).listAllUsers(firstResult, maxResults, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List users
         * @param {string} [token] Keycloak token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKeycloakUsers(token?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<User>> {
            const fetchArgs = UsersApiFetchParamCreator(configuration).listKeycloakUsers(token, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retreive user
         * @param {number} userId The id of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveUser(userId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const fetchArgs = UsersApiFetchParamCreator(configuration).retrieveUser(userId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update user
         * @param {number} userId The id of the user
         * @param {User} body The user to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userId: number, body: User, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const fetchArgs = UsersApiFetchParamCreator(configuration).updateUser(userId, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create user
         * @param {User} body The user to be created
         * @param {string} [token] Keycloak token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: User, token?: string, options?: any) {
            return UsersApiFp(configuration).createUser(body, token, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get an user by keycloak id
         * @param {string} keycloakId The keycloak id of the user to look up
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByKeycloakId(keycloakId: string, options?: any) {
            return UsersApiFp(configuration).getUserByKeycloakId(keycloakId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List all users
         * @param {number} firstResult The offset of the first result
         * @param {number} maxResults The maximum number of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllUsers(firstResult: number, maxResults: number, options?: any) {
            return UsersApiFp(configuration).listAllUsers(firstResult, maxResults, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List users
         * @param {string} [token] Keycloak token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKeycloakUsers(token?: string, options?: any) {
            return UsersApiFp(configuration).listKeycloakUsers(token, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retreive user
         * @param {number} userId The id of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveUser(userId: number, options?: any) {
            return UsersApiFp(configuration).retrieveUser(userId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update user
         * @param {number} userId The id of the user
         * @param {User} body The user to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userId: number, body: User, options?: any) {
            return UsersApiFp(configuration).updateUser(userId, body, options)(fetch, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Create user
     * @param {} body The user to be created
     * @param {} [token] Keycloak token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(body: User, token?: string, options?: any) {
        return UsersApiFp(this.configuration).createUser(body, token, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get an user by keycloak id
     * @param {} keycloakId The keycloak id of the user to look up
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserByKeycloakId(keycloakId: string, options?: any) {
        return UsersApiFp(this.configuration).getUserByKeycloakId(keycloakId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List all users
     * @param {} firstResult The offset of the first result
     * @param {} maxResults The maximum number of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAllUsers(firstResult: number, maxResults: number, options?: any) {
        return UsersApiFp(this.configuration).listAllUsers(firstResult, maxResults, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List users
     * @param {} [token] Keycloak token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listKeycloakUsers(token?: string, options?: any) {
        return UsersApiFp(this.configuration).listKeycloakUsers(token, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retreive user
     * @param {} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public retrieveUser(userId: number, options?: any) {
        return UsersApiFp(this.configuration).retrieveUser(userId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update user
     * @param {} userId The id of the user
     * @param {} body The user to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(userId: number, body: User, options?: any) {
        return UsersApiFp(this.configuration).updateUser(userId, body, options)(this.fetch, this.basePath);
    }

}

